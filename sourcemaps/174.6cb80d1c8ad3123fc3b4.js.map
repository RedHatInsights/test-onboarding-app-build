{"version":3,"sources":["webpack:///./config/empty.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/store/index.js"],"names":["module","exports","SamplePage","lazy","OopsPage","NoPermissionsPage","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","component","Redirect","to","props","history","useHistory","useEffect","getRegistry","register","notifications","notificationsReducer","insights","chrome","init","identifyApp","unregister","on","event","push","navId","Fragment","childProps","middleware","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"mappings":"sGACAA,EAAOC,QAAU,I,wFCIXC,GAAaC,WAAK,kBACtB,2EAEIC,GAAWD,WAAK,kBACpB,2EAEIE,GAAoBF,WAAK,kBAC7B,2EAaWG,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,KAAK,UAAUC,UAAWZ,IACjC,kBAAC,EAAAU,MAAD,CAAOC,KAAK,QAAQC,UAAWV,IAC/B,kBAAC,EAAAQ,MAAD,CAAOC,KAAK,kBAAkBC,UAAWT,IAEzC,kBAAC,EAAAO,MAAD,KACE,kBAAC,EAAAG,SAAD,CAAUC,GAAG,gB,8BCJrB,QA1BY,SAACC,GACX,IAAMC,GAAUC,kBAiBhB,OAfAC,gBAAU,YACSC,UACRC,SAAS,CAAEC,cAAeC,OACnCC,SAASC,OAAOC,OAGhBF,SAASC,OAAOE,YAAY,uBAC5B,IAAMC,EAAaJ,SAASC,OAAOI,GAAG,kBAAkB,SAACC,GAAD,OACtDb,EAAQc,KAAR,WAAiBD,EAAME,WAEzB,OAAO,WACLJ,OAED,IAGD,kBAAC,EAAAK,SAAD,KACE,kBAAC,KAAD,MACA,kBAAC5B,EAAD,CAAQ6B,WAAYlB,O,wFCxBnB,SAASU,IAAoB,2BAAZS,EAAY,yBAAZA,EAAY,gBAMlC,OALWf,QAAY,GAAD,CACpBgB,KACAC,QAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAFtC,OAGjBH","file":"js/174.70cd47310841ed1a319a.js","sourcesContent":["// Used as an empty module to save bundle size\nmodule.exports = {};\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst SamplePage = lazy(() =>\n  import(/* webpackChunkName: \"SamplePage\" */ './Routes/SamplePage/SamplePage')\n);\nconst OopsPage = lazy(() =>\n  import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'\n  )\n);\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/sample\" component={SamplePage} />\n      <Route path=\"/oops\" component={OopsPage} />\n      <Route path=\"/no-permissions\" component={NoPermissionsPage} />\n      {/* Finally, catch all unmatched routes */}\n      <Route>\n        <Redirect to=\"/sample\" />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst App = (props) => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    insights.chrome.init();\n\n    // TODO change this to your appname\n    insights.chrome.identifyApp('test_onboarding_app');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"sourceRoot":""}